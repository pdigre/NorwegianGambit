package norwegiangambit.util;


/**
 * Simplified Evaluation Function 
 *
 */
public class PSQT_SEF extends PSQT{

	public PSQT_SEF(){
		super(
			new int[]{WP,WN,WB,WR,WQ,WK}, 
			new int[]{100,320,330,500,900,20000}, 
			new int[][][]{ //
		{ // Pawn
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(   5,   5), S(  10,  10), S(  10,  10), S( -20, -20), S( -20, -20), S(  10,  10), S(  10,  10), S(   5,   5),
		 S(   5,   5), S(  -5,  -5), S( -10, -10), S(   0,   0), S(   0,   0), S( -10, -10), S(  -5,  -5), S(   5,   5),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(  20,  20), S(  20,  20), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(   5,   5), S(   5,   5), S(  10,  10), S(  25,  25), S(  25,  25), S(  10,  10), S(   5,   5), S(   5,   5),
		 S(  10,  10), S(  10,  10), S(  20,  20), S(  30,  30), S(  30,  30), S(  20,  20), S(  10,  10), S(  10,  10),
		 S(  50,  50), S(  50,  50), S(  50,  50), S(  50,  50), S(  50,  50), S(  50,  50), S(  50,  50), S(  50,  50),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)
		},
		{ // Knight
		 S( -50, -50), S( -40, -40), S( -30, -30), S( -30, -30), S( -30, -30), S( -30, -30), S( -40, -40), S( -50, -50),
		 S( -40, -40), S( -20, -20), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -20, -20), S( -40, -40),
		 S( -30, -30), S(   0,   0), S(  10,  10), S(  15,  15), S(  15,  15), S(  10,  10), S(   0,   0), S( -30, -30),
		 S( -30, -30), S(   5,   5), S(  15,  15), S(  20,  20), S(  20,  20), S(  15,  15), S(   5,   5), S( -30, -30),
		 S( -30, -30), S(   5,   5), S(  15,  15), S(  20,  20), S(  20,  20), S(  15,  15), S(   5,   5), S( -30, -30),
		 S( -30, -30), S(   0,   0), S(  10,  10), S(  15,  15), S(  15,  15), S(  10,  10), S(   0,   0), S( -30, -30),
		 S( -40, -40), S( -20, -20), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -20, -20), S( -40, -40),
		 S( -50, -50), S( -40, -40), S( -30, -30), S( -30, -30), S( -30, -30), S( -30, -30), S( -40, -40), S( -50, -50)
		},
		{ // Bishop
		 S( -20, -20), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -20, -20),
		 S( -10, -10), S(   5,   5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   5,   5), S( -10, -10),
		 S( -10, -10), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S( -10, -10),
		 S( -10, -10), S(   0,   0), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(   0,   0), S( -10, -10),
		 S( -10, -10), S(   5,   5), S(   5,   5), S(  10,  10), S(  10,  10), S(   5,   5), S(   5,   5), S( -10, -10),
		 S( -10, -10), S(   0,   0), S(   5,   5), S(  10,  10), S(  10,  10), S(   5,   5), S(   0,   0), S( -10, -10),
		 S( -10, -10), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -10, -10),
		 S( -20, -20), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -10, -10), S( -20, -20)
		},
		{ // Rook
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   5,   5), S(   5,   5), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5),
		 S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5),
		 S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5),
		 S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5),
		 S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5),
		 S(   5,   5), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(  10,  10), S(   5,   5),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)
		},
		{ // Queen
		 S( -20, -20), S( -10, -10), S( -10, -10), S(  -5,  -5), S(  -5,  -5), S( -10, -10), S( -10, -10), S( -20, -20),
		 S( -10, -10), S(   0,   0), S(   5,   5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -10, -10),
		 S( -10, -10), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S( -10, -10),
		 S(  -5,  -5), S(   0,   0), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S(  -5,  -5),
		 S(  -5,  -5), S(   0,   0), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S(  -5,  -5),
		 S( -10, -10), S(   0,   0), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S( -10, -10),
		 S( -10, -10), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -10, -10),
		 S( -20, -20), S( -10, -10), S( -10, -10), S(  -5,  -5), S(  -5,  -5), S( -10, -10), S( -10, -10), S( -20, -20)
		},
		{ // King
		 S(  20, -50), S(  30, -30), S(  10, -30), S(   0, -30), S(   0, -30), S(  10, -30), S(  30, -30), S(  20, -50),
		 S(  20, -30), S(  20, -30), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  20, -30), S(  20, -30),
		 S( -10, -30), S( -20, -10), S( -20,  20), S( -40,  30), S( -40,  30), S( -20,  20), S( -20, -10), S( -10, -30),
		 S( -20, -30), S( -30, -10), S( -30,  30), S( -40,  40), S( -40,  40), S( -30,  30), S( -30, -10), S( -20, -30),
		 S( -30, -30), S( -40, -10), S( -40,  30), S( -50,  40), S( -50,  40), S( -40,  30), S( -40, -10), S( -30, -30),
		 S( -30, -30), S( -40, -10), S( -40,  20), S( -50,  30), S( -50,  30), S( -40,  20), S( -40, -10), S( -30, -30),
		 S( -30, -30), S( -40, -20), S( -40, -10), S( -50,   0), S( -50,   0), S( -40, -10), S( -40, -20), S( -30, -30),
		 S( -30, -50), S( -40, -40), S( -40, -30), S( -50, -20), S( -50, -20), S( -40, -30), S( -40, -40), S( -30, -50)
		}
	});
	}
}
