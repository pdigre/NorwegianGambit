package norwegiangambit.util;

import static norwegiangambit.util.BITS.S;

/**
 * Simplified Evaluation Function 
 *
 */
public class PSQT_Stockfish extends PSQT{

	public PSQT_Stockfish(){
		super(
			new int[]{WP,WN,WB,WR,WQ,WK}, 
			new int[]{S(92,92),S(385,385),S(385,385),S(593,593),S(1244,1244),S(9900,9900)}, 
			new int[][]{ //
		{ // Pawn
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(  -6, -20), S(   4,   0), S(   4,   0), S( -15,   0), S( -15,   0), S(   4,   0), S(   4,   0), S(  -6, -20),
		 S(  -6, -17), S(   4,   3), S(   2,   3), S(   5,   3), S(   5,   3), S(   2,   3), S(   4,   3), S(  -6, -17),
		 S(  -6,  -9), S(   4,  11), S(   5,  11), S(  16,  11), S(  16,  11), S(   5,  11), S(   4,  11), S(  -6,  -9),
		 S(  -5,   5), S(   4,  24), S(  10,  24), S(  20,  24), S(  20,  24), S(  10,  24), S(   4,  24), S(  -5,   5),
		 S(   3,  17), S(  12,  32), S(  20,  35), S(  28,  35), S(  28,  35), S(  20,  35), S(  12,  32), S(   3,  17),
		 S(   8,  25), S(  16,  40), S(  24,  45), S(  32,  45), S(  32,  45), S(  24,  45), S(  16,  40), S(   8,  25),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)
		},
		{ // Knight
		 S( -53, -56), S( -42, -44), S( -32, -34), S( -21, -22), S( -21, -22), S( -32, -34), S( -42, -44), S( -53, -56),
		 S( -42, -44), S( -32, -34), S( -10, -10), S(   0,   0), S(   0,   0), S( -10, -10), S( -32, -34), S( -42, -44),
		 S( -21, -22), S( -10, -10), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S( -10, -10), S( -21, -22),
		 S( -18, -19), S(   0,   0), S(   3,   3), S(  21,  22), S(  21,  22), S(   3,   3), S(   0,   0), S( -18, -19),
		 S( -18, -19), S(   0,   0), S(  10,  10), S(  21,  22), S(  21,  22), S(  10,  10), S(   0,   0), S( -18, -19),
		 S( -21, -22), S(   5,   5), S(  10,  10), S(  16,  17), S(  16,  17), S(  10,  10), S(   5,   5), S( -21, -22),
		 S( -42, -44), S( -32, -34), S( -10, -10), S(   0,   0), S(   0,   0), S( -10, -10), S( -32, -34), S( -42, -44),
		 S( -53, -56), S( -42, -44), S( -32, -34), S( -21, -22), S( -21, -22), S( -32, -34), S( -42, -44), S( -53, -56)
		},
		{ // Bishop
		 S(  -5,   0), S(  -5,   0), S(  -7,   0), S(  -5,   0), S(  -5,   0), S(  -7,   0), S(  -5,   0), S(  -5,   0),
		 S(   0,   0), S(   4,   2), S(   2,   2), S(   2,   2), S(   2,   2), S(   2,   2), S(   4,   2), S(   0,   0),
		 S(   0,   0), S(   3,   2), S(   4,   4), S(   4,   4), S(   4,   4), S(   4,   4), S(   3,   2), S(   0,   0),
		 S(   0,   0), S(   2,   2), S(   4,   4), S(   4,   4), S(   4,   4), S(   4,   4), S(   2,   2), S(   0,   0),
		 S(   0,   0), S(   2,   2), S(   4,   4), S(   4,   4), S(   4,   4), S(   4,   4), S(   2,   2), S(   0,   0),
		 S(   0,   0), S(   2,   2), S(   4,   4), S(   4,   4), S(   4,   4), S(   4,   4), S(   2,   2), S(   0,   0),
		 S(   0,   0), S(   4,   2), S(   2,   2), S(   2,   2), S(   2,   2), S(   2,   2), S(   4,   2), S(   0,   0),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0)
		},
		{ // Rook
		 S(   0,   0), S(   3,   3), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   3,   3), S(   0,   0),
		 S(  -3,  -3), S(   2,   2), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   2,   2), S(  -3,  -3),
		 S(  -2,  -2), S(   0,   0), S(   0,   0), S(   2,   2), S(   2,   2), S(   0,   0), S(   0,   0), S(  -2,  -2),
		 S(  -2,  -2), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -2,  -2),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0),
		 S(  22,  22), S(  27,  27), S(  27,  27), S(  27,  27), S(  27,  27), S(  27,  27), S(  27,  27), S(  22,  22),
		 S(   8,   8), S(  11,  11), S(  13,  13), S(  13,  13), S(  13,  13), S(  13,  13), S(  11,  11), S(   8,   8)
		},
		{ // Queen
		 S( -10, -10), S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5), S( -10, -10),
		 S(  -5,  -5), S(   0,   0), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S(  -5,  -5),
		 S(   0,   0), S(   5,   5), S(   5,   5), S(   6,   6), S(   6,   6), S(   5,   5), S(   5,   5), S(   0,   0),
		 S(   0,   0), S(   5,   5), S(   6,   6), S(   6,   6), S(   6,   6), S(   6,   6), S(   5,   5), S(   0,   0),
		 S(   0,   0), S(   5,   5), S(   6,   6), S(   6,   6), S(   6,   6), S(   6,   6), S(   5,   5), S(   0,   0),
		 S(   0,   0), S(   5,   5), S(   5,   5), S(   6,   6), S(   6,   6), S(   5,   5), S(   5,   5), S(   0,   0),
		 S(  -5,  -5), S(   0,   0), S(   5,   5), S(   5,   5), S(   5,   5), S(   5,   5), S(   0,   0), S(  -5,  -5),
		 S( -10, -10), S(  -5,  -5), S(   0,   0), S(   0,   0), S(   0,   0), S(   0,   0), S(  -5,  -5), S( -10, -10)
		},
		{ // King
		 S(  24,  24), S(  24,  24), S(   9,   9), S(   0,   0), S(   0,   0), S(   9,   9), S(  24,  24), S(  24,  24),
		 S(  16,   8), S(  14,  16), S(   7,  24), S(  -3,  32), S(  -3,  32), S(   7,  24), S(  14,  16), S(  16,   8),
		 S(   4,  16), S(  -2,  24), S(  -5,  32), S( -15,  40), S( -15,  40), S(  -5,  32), S(  -2,  24), S(   4,  16),
		 S( -10,  24), S( -15,  32), S( -20,  40), S( -25,  48), S( -25,  48), S( -20,  40), S( -15,  32), S( -10,  24),
		 S( -15,  24), S( -30,  32), S( -35,  40), S( -40,  48), S( -40,  48), S( -35,  40), S( -30,  32), S( -15,  24),
		 S( -25,  16), S( -35,  24), S( -40,  32), S( -45,  40), S( -45,  40), S( -40,  32), S( -35,  24), S( -25,  16),
		 S( -22,   8), S( -35,  16), S( -40,  24), S( -40,  32), S( -40,  32), S( -40,  24), S( -35,  16), S( -22,   8),
		 S( -22,   0), S( -35,   8), S( -40,  16), S( -40,  24), S( -40,  24), S( -40,  16), S( -35,   8), S( -22,   0)
		}
		});
		init("a=4"); 
	}

}
